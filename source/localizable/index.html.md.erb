---
title: Factoro API

language_tabs: # must be one of https://git.io/vQNgJ
  - shell: cURL
  - ruby: Ruby
  - python: Python
  - javascript: JavaScript

toc_footers:
  - <a href='#'>Sign Up for a Developer Key</a>
  - <a href='https://github.com/slatedocs/slate'>Documentation Powered by Slate</a>

includes:
  - errors

search: true

code_clipboard: true
---

# Introduction

Welcome to the Factoro API  documentation. You can use our API to access our endpoints and integrate your operation directly with us.

We have language bindings in Shell, Ruby, Python, and JavaScript! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

# Authentication

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "<%= config[:url] %>/v1" \
  -H "Authorization: Bearer ${token}"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> Make sure to replace `token` with your API key.

Factoro uses API keys to allow access to the API. As an administrator, you can get your API key in your [settings page](https://app.factoro.mx/bank/settings).

`Authorization: Bearer ${token}

<aside class="notice">
You must replace <code>${token}</code> with your personal API key.
</aside>

# Verification

## Verify that your integration and API key is working

```shell
curl "<%= config[:url] %>/v1/shared/authentication/hello" \
  -H "Authorization: ${token}"
```

> Response:

```json
{
 message: "Hello Factoro",
 time: "2021-08-26T12:00:00",
}
```

This endpoint helps the user verify that the integration is correctly implemented. 
By calling this endpoint, you will have tested that your service is correctly attaching the API key
and calling our server.

### HTTP Request

<span class="tag green">GET</span>
`<%= config[:url] %>/v1/shared/authentication/hello`

# Credit Lines

## Get all Credit Lines

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "<%= config[:url] %>/v1/financial_institutions/credit_lines" \
  -H "Authorization: ${token}"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let kittens = api.kittens.get();
```

> Response:

```json
[
  {
    "id": 1,
    "company": {
      "name": "Company Name",
      "alias": "Alias",
      "tax_id": "Tax ID",
      "factoring_id": "ID123",
    },
    "payment_term": 1,
    "credit_limit": 1000000,
    "ordinary_interest_rate": 1.4,
    "moratorium_interest_factor": 1.1,
    "moratorium_interest_rate": 4.5,
    "first_order_rebate": 0,
    "balance": 0,
    "start_date": "2021-04-01T12:00:00",
    "end_date": "2022-04-01T12:00:00",
    "discarded_at": null,
    "min_term": 1,
    "max_term": 100,
    "min_total": 1,
    "max_total": 1000000,
    "token_sent_to": "example@mail.com"
  },
  {
    "id": 2,
    "company": {
      "name": "Company Name",
      "alias": "Alias",
      "tax_id": "Tax ID",
      "factoring_id": "ID123",
    },
    "payment_term": 1,
    "credit_limit": 1000000,
    "ordinary_interest_rate": 1.4,
    "moratorium_interest_factor": 1.1,
    "moratorium_interest_rate": 4.5,
    "first_order_rebate": 0,
    "balance": 0,
    "start_date": "2021-04-01T12:00:00",
    "end_date": "2022-04-01T12:00:00",
    "discarded_at": null,
    "min_term": 1,
    "max_term": 100,
    "min_total": 1,
    "max_total": 1000000,
    "token_sent_to": "example@mail.com"
  }
]
```

This endpoint gets all credit lines

### HTTP Request

<span class="tag green">GET</span>
`<%= config[:url] %>/v1/financial_institutions/credit_lines`

### Query Parameters

Parameter | Type | Default | Description
--------- | -----| ------- | -----------
page | Integer | 1 | The page number for result retrieval
sort_field | String | date | The field to which sort the credit lines
sort_order | String | desc | The order in which the credit lines are shown
company | String | null | The name or alias of a specific company to filter credit lines
limit | Integer | 20 | The amount of credit lines to show per page
start_date | Date | null | The start date to filter
end_date | Date | null | The end date to filter
currency_id | Integer | null | The ID of the currency to filter by currency

## Get a specific credit line

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "<%= config[:url] %>/v1/financial_institutions/credit_lines/76" \
  -H "Authorization: ${token}"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.get(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 76,
  "company": {
    "name": "Company Name",
    "alias": "Alias",
    "tax_id": "Tax ID",
    "factoring_id": "ID123",
  },
  "payment_term": 1,
  "credit_limit": 1000000,
  "ordinary_interest_rate": 1.4,
  "moratorium_interest_factor": 1.1,
  "moratorium_interest_rate": 4.5,
  "first_order_rebate": 0,
  "balance": 0,
  "start_date": "2021-04-01T12:00:00",
  "end_date": "2022-04-01T12:00:00",
  "discarded_at": null,
  "min_term": 1,
  "max_term": 100,
  "min_total": 1,
  "max_total": 1000000,
  "token_sent_to": "example@mail.com"
}
```

This endpoint retrieves a specific credit line

### HTTP Request
<span class="tag green">GET</span>
`<%= config[:url] %>/v1/financial_institutions/credit_lines/${id}`

### URL Parameters

Parameter | Description
--------- | -----------
id | The ID of the credit line to retrieve

# Documents

## Authorize documents for early payment

```shell
curl -X POST "<%= config[:url] %>/v1/financial_institutions/documents" \
  -H "Authorization: ${token}" \ 
  -H "Content-Type: application/json" \
  -d '{ "documents": [1,2,3] }'
```

> JSON response:

```json
[
  {
    "id": 1,
    "emitter": {
      id: 456,
      name: "Emitter Name"
    },
    "receiver": {
      id: 789,
      name: "Receiver Name",
    },
    "currency": {
      id: 1,
      code: "MXN",
    },
    "factoring_id": "FAC123456",
    "uuid": "21295371-177e-41f0-9c5c-c3c87eb71a13",
    "due_date": "2021-09-30T11:59:59",
    "total": 10000,
    "discount": 100,
    "result": "success",
    "message": null,
  },
  {
    "id": 2,
    "emitter": {
      id: 456,
      name: "Emitter Name"
    },
    "receiver": {
      id: 789,
      name: "Receiver Name",
    },
    "currency": {
      id: 1,
      code: "MXN",
    },
    "factoring_id": "FAC989234",
    "uuid": "a757d971-ddc2-4a7f-be16-47728e96090b",
    "due_date": "2021-09-10T11:59:59",
    "total": 10000,
    "discount": 100,
    "result": "warning",
    "message": "Fecha de vencimiento documento demasiado pr√≥xima",
  },
  {
    "id": 3,
    "emitter": {
      id: 456,
      name: "Emitter Name"
    },
    "receiver": {
      id: 789,
      name: "Receiver Name",
    },
    "currency": {
      id: 1,
      code: "MXN",
    },
    "factoring_id": "FAC989234",
    "uuid": "324604bc-466d-4620-8b8b-b8eadb031390",
    "due_date": "2021-09-10T11:59:59",
    "total": 10000,
    "discount": 100,
    "result": "error",
    "message": "Fondos insuficientes",
  },
]
```

This endpoint approves the specified documents for early payment.
Those documents should be in the `requested` status.

### HTTP Request
<span class="tag blue">POST</span>
`<%= config[:url] %>/v1/financial_institutions/documents`

Each document will be returned with its respective status depending on the
outcome of the operation.

### Parameters

Parameter | Type | Description
--------- | ---- | -----------
documents | Array[Integer] | The array of document id's to approve

### Response

### Statuses 
Status | Description
------ | -----------
<span class="tag green">success</span> | The document was processed successfully
<span class="tag gold">warning</span> | The document was processed successfully, but there is something that may seem like an error in the future
<span class="tag red">error</span> | The document was not processed successfully